---
export const prerender = false;

import Layout from "@/layouts/BaseLayout.astro";
import Title from "@/components/page/Title.astro";
import { Icon } from "astro-icon/components";
import { contactFormSchema } from "@/lib/schemas";
import { SQSClient, SendMessageCommand } from "@aws-sdk/client-sqs";

if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData();
		const data = {
			name: formData.get("name")?.toString(),
			email: formData.get("email")?.toString(),
			subject: formData.get("subject")?.toString(),
			message: formData.get("message")?.toString(),
		};

		// Zod validation
		const validationResult = contactFormSchema.safeParse(data);

		if (!validationResult.success) {
			const errors = validationResult.error.errors;
			const errorMessage = errors
				.map((err: { message: string }) => err.message)
				.join(", ");
			return new Response(errorMessage, { status: 400 });
		}

		const validatedData = validationResult.data;

    const formattedMessage = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔔 New Contact Form Submission
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

👤 Sender Information:
   Name: ${validatedData.name}
   Email: ${validatedData.email}

📧 Message Details:
   Subject: ${validatedData.subject}

📝 Message:
${validatedData.message}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Timestamp: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    `.trim();

    const sqsMessage = {
      subject: validatedData.subject,
      body: formattedMessage
    };

    const { env } = Astro.locals.runtime;

    const client = new SQSClient({
      region: "ap-northeast-1",
      credentials: {
        accessKeyId: env.SECRET_AWS_ACCESS_KEY,
        secretAccessKey: env.SECRET_AWS_SECRET_KEY,
      }
    });
    const params = {
      QueueUrl: env.SECRET_SQS_QUEUE_URL,
      MessageBody: JSON.stringify(sqsMessage),
    }
    const command = new SendMessageCommand(params);
    await client.send(command);

		// Success response
		return new Response(
			"Thank you for your message. I'll get back to you soon!",
			{ status: 200 },
		);
	} catch (error) {
		console.error("Form submission error:", error);
		return new Response("An error occurred while sending", { status: 500 });
	}
}
---

<Layout
  title="Contact | Ogata Katsuya's Portfolio"
  description="Contact page - Get in touch with Ogata Katsuya"
  pagefind={true}
  og={{
    enabled: true,
    image: new URL("/og-image.png", Astro.url),
  }}
  type="website"
>
  <Title title="Contact" />

  <div class="text-center mb-8">
    <p class="text-lg px-2 md:text-xl text-gray-600 dark:text-gray-300">
      I'd love to hear from you! <br>
      Feel free to reach out using the form below.
    </p>
  </div>
  
  <main class="flex-1 flex justify-center items-center px-6 pb-16">
    <div class="w-full max-w-2xl">
      <!-- お問い合わせフォーム -->
      <div class="bg-gradient-to-b from-slate-300 to-slate-400/50 dark:from-gray-900 dark:to-gray-800 rounded-xl shadow-2xl px-6 sm:px-8 lg:px-16 py-8">

        <form class="space-y-6" id="contact-form" novalidate>
          <!-- Name -->
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="name"
              name="name"
              class="w-full px-4 py-3 border border-gray-400 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 transition-colors duration-200"
              placeholder="John Doe"
            />
            <div id="name-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Email Address -->
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Email Address <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="email"
              name="email"
              class="w-full px-4 py-3 border border-gray-400 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 transition-colors duration-200"
              placeholder="example@email.com"
            />
            <div id="email-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Subject -->
          <div>
            <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Subject <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="subject"
              name="subject"
              class="w-full px-4 py-3 border border-gray-400 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 transition-colors duration-200"
              placeholder="Subject of your inquiry"
            />
            <div id="subject-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Message -->
          <div>
            <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Message <span class="text-red-500">*</span>
            </label>
            <textarea
              id="message"
              name="message"
              rows="6"
              class="w-full px-4 py-3 border border-gray-400 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white placeholder:text-gray-500 dark:placeholder:text-gray-400 transition-colors duration-200 resize-none"
              placeholder="Tell me about your project or inquiry..."
            ></textarea>
            <div id="message-error" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>

          <!-- Success and Error Messages -->
          <div id="message-container" class="mt-6 hidden">
            <div id="success-message" class="bg-green-100 dark:bg-green-900 border border-green-400 dark:border-green-600 text-green-700 dark:text-green-300 px-4 py-3 rounded-lg hidden">
              <div class="flex items-center gap-2">
                <Icon name="ri:check-line" class="w-5 h-5" />
                <span>Thank you for your message! I'll get back to you soon.</span>
              </div>
            </div>
            <div id="error-message" class="bg-red-100 dark:bg-red-900 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-300 px-4 py-3 rounded-lg hidden">
              <div class="flex items-center gap-2">
                <Icon name="ri:error-warning-line" class="w-5 h-5" />
                <span id="error-text">An error occurred. Please try again.</span>
              </div>
            </div>
          </div>

          <!-- Submit Button -->
          <div class="text-center">
            <button 
              type="submit" 
              class="w-full bg-slate-600 hover:bg-slate-700 dark:bg-slate-700 dark:hover:bg-slate-600 text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200 shadow-md hover:shadow-lg flex items-center justify-center gap-2"
            >
              <Icon name="ri:send-plane-line" class="w-5 h-5" />
              Send Message
            </button>
          </div>
        </form>
    </div>
  </main>

  <script>
    // Validation functions
    const validators = {
      name: (value: string) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Name is required';
        if (trimmed.length < 2) return 'Name must be at least 2 characters';
        if (trimmed.length > 100) return 'Name must be less than 100 characters';
        return null;
      },
      
      email: (value: string) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Email is required';
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(trimmed)) return 'Please enter a valid email address';
        if (trimmed.length > 255) return 'Email must be less than 255 characters';
        return null;
      },
      
      subject: (value: string) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Subject is required';
        if (trimmed.length < 3) return 'Subject must be at least 3 characters';
        if (trimmed.length > 200) return 'Subject must be less than 200 characters';
        return null;
      },
      
      message: (value: string) => {
        const trimmed = value.trim();
        if (!trimmed) return 'Message is required';
        if (trimmed.length < 10) return 'Message must be at least 10 characters';
        if (trimmed.length > 2000) return 'Message must be less than 2000 characters';
        return null;
      }
    };

    // Show/hide field error
    function showFieldError(fieldName: string, error: string | null) {
      const errorElement = document.getElementById(`${fieldName}-error`);
      const inputElement = document.getElementById(fieldName) as HTMLInputElement | HTMLTextAreaElement;
      
      if (error && errorElement && inputElement) {
        errorElement.textContent = error;
        errorElement.classList.remove('hidden');
        inputElement.classList.add('border-red-500');
        inputElement.classList.remove('border-gray-400', 'dark:border-gray-600');
      } else if (errorElement && inputElement) {
        errorElement.classList.add('hidden');
        inputElement.classList.remove('border-red-500');
        inputElement.classList.add('border-gray-400', 'dark:border-gray-600');
      }
    }

    // Validate single field
    function validateField(fieldName: keyof typeof validators, value: string) {
      const error = validators[fieldName](value);
      showFieldError(fieldName, error);
      return !error;
    }

    // Validate all fields
    function validateForm(data: Record<string, string>) {
      let isValid = true;
      
      (Object.keys(validators) as Array<keyof typeof validators>).forEach(fieldName => {
        const fieldValid = validateField(fieldName, data[fieldName] || '');
        if (!fieldValid) isValid = false;
      });
      
      return isValid;
    }

    // Form submission handling
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form') as HTMLFormElement;
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const formData = new FormData(form);
          const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
          const messageContainer = document.getElementById('message-container');
          const successMessage = document.getElementById('success-message');
          const errorMessage = document.getElementById('error-message');
          const errorText = document.getElementById('error-text');
          
          // Collect form data
          const data = {
            name: formData.get('name')?.toString() || '',
            email: formData.get('email')?.toString() || '',
            subject: formData.get('subject')?.toString() || '',
            message: formData.get('message')?.toString() || '',
          };

          // Validate form
          const isValid = validateForm(data);
          
          if (!isValid) {
            // Show general error message
            if (errorText) errorText.textContent = 'Please fix the errors above and try again.';
            if (messageContainer) messageContainer.classList.remove('hidden');
            if (errorMessage) errorMessage.classList.remove('hidden');
            if (successMessage) successMessage.classList.add('hidden');
            return;
          }
          
          // Disable button
          if (button) {
            button.disabled = true;
            button.textContent = 'Sending...';
          }
          
          // Reset messages
          if (messageContainer) messageContainer.classList.add('hidden');
          if (successMessage) successMessage.classList.add('hidden');
          if (errorMessage) errorMessage.classList.add('hidden');
          
          try {
            const response = await fetch('/contact', {
              method: 'POST',
              body: formData
            });
            
            if (response.ok) {
              // Success
              form.reset();
              // Clear any field errors
              (['name', 'email', 'subject', 'message'] as Array<keyof typeof validators>).forEach(fieldName => {
                showFieldError(fieldName, null);
              });
              if (messageContainer) messageContainer.classList.remove('hidden');
              if (successMessage) successMessage.classList.remove('hidden');
            } else {
              // Error
              const errorMsg = await response.text();
              if (errorText) errorText.textContent = errorMsg;
              if (messageContainer) messageContainer.classList.remove('hidden');
              if (errorMessage) errorMessage.classList.remove('hidden');
            }
          } catch (error) {
            // Network error
            if (errorText) errorText.textContent = 'A network error occurred. Please try again.';
            if (messageContainer) messageContainer.classList.remove('hidden');
            if (errorMessage) errorMessage.classList.remove('hidden');
          } finally {
            // Restore button
            if (button) {
              button.disabled = false;
              button.innerHTML = '<svg class="w-5 h-5"><use href="#ri:send-plane-line"></use></svg>Send Message';
            }
          }
        });
      }
    });
  </script>
</Layout>